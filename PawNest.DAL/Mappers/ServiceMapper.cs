using AutoMapper;
using PawNest.DAL.Data.Entities;
using PawNest.DAL.Data.Requests.Service;
using PawNest.DAL.Data.Responses.Service;

namespace PawNest.DAL.Mappers
{
    public class ServiceMapper : Profile
    {
        public ServiceMapper()
        {
            // CreateServiceRequest to Service
            CreateMap<CreateServiceRequest, Service>()
                .ForMember(dest => dest.ServiceId, opt => opt.Ignore()) // Id will be generated by the database
                .ForMember(dest => dest.FreelancerId, opt => opt.Ignore()); // FreelancerId will be set manually

            // UpdateServiceRequest to Service
            CreateMap<UpdateServiceRequest, Service>()
                .ForMember(dest => dest.ServiceId, opt => opt.Ignore()) // Id will be set manually
                .ForMember(dest => dest.FreelancerId, opt => opt.Ignore()) // FreelancerId will be set manually
                .ForMember(dest => dest.CreatedAt, opt => opt.Ignore()); // CreatedAt should not be updated

            // Service to GetServiceResponse
            CreateMap<Service, GetServiceResponse>()
                .ForMember(dest => dest.Type, opt => opt.MapFrom(src => src.Type.ToString()))
                .ForMember(dest => dest.Id, opt => opt.MapFrom(src => src.ServiceId))
                .ForMember(dest => dest.Title, opt => opt.MapFrom(src => src.Title))
                .ForMember(dest => dest.Description, opt => opt.MapFrom(src => src.Description))
                .ForMember(dest => dest.Price, opt => opt.MapFrom(src => src.Price))
                .ForMember(dest => dest.CreatedAt, opt => opt.MapFrom(src => src.CreatedAt))
                .ForMember(dest => dest.UpdatedAt, opt => opt.MapFrom(src => src.UpdatedAt))
                .ForMember(dest => dest.FreelancerId, opt => opt.MapFrom(src => src.FreelancerId));

        }
    }
}
