<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/PawNest.API/Program.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/PawNest.API/Program.cs" />
              <option name="originalContent" value="using Everwell.DAL.Repositories.Implements;&#10;using Everwell.DAL.Repositories.Interfaces;&#10;using Microsoft.OpenApi.Models;&#10;using Microsoft.AspNetCore.Authentication.JwtBearer;&#10;using Microsoft.EntityFrameworkCore;&#10;using PawNest.BLL.Services.Implements;&#10;using PawNest.BLL.Services.Interfaces;&#10;using PawNest.DAL.Data.Context;&#10;using PawNest.DAL.Mappers;&#10;using AutoMapper;&#10;&#10;var builder = WebApplication.CreateBuilder(args);&#10;&#10;builder.Services.AddOpenApi();&#10;builder.Services.AddControllers();&#10;builder.Services.AddEndpointsApiExplorer();&#10;&#10;// Configure Swagger with JWT Bearer authentication&#10;builder.Services.AddSwaggerGen(options =&gt;&#10;{&#10;    options.SwaggerDoc(&quot;v1&quot;, new OpenApiInfo&#10;    {&#10;        Title = &quot;PawNest.API&quot;,&#10;        Version = &quot;v1&quot;,&#10;        Description = &quot;A Freelancer project - Pet Care Service API&quot;,&#10;    });&#10;    // options.AddSecurityDefinition(JwtBearerDefaults.AuthenticationScheme, new OpenApiSecurityScheme&#10;    // {&#10;    //     Name = &quot;Authorization&quot;,&#10;    //     In = ParameterLocation.Header,&#10;    //     Type = SecuritySchemeType.Http,&#10;    //     Scheme = &quot;Bearer&quot;,&#10;    //     BearerFormat = &quot;JWT&quot;,&#10;    //     Description = &quot;JWT Authorization header using the Bearer scheme. \r\n\r\n Enter your token:&quot;&#10;    // });&#10;    // options.AddSecurityRequirement(new OpenApiSecurityRequirement&#10;    // {&#10;    //     {&#10;    //         new OpenApiSecurityScheme&#10;    //         {&#10;    //             Reference = new OpenApiReference&#10;    //             {&#10;    //                 Type = ReferenceType.SecurityScheme,&#10;    //                 Id = JwtBearerDefaults.AuthenticationScheme&#10;    //             }&#10;    //         },&#10;    //         new List&lt;string&gt;()&#10;    //     }&#10;    // });&#10;});&#10;&#10;// Configure JWT Bearer authentication&#10;// builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)&#10;//     .AddJwtBearer(options =&gt;&#10;//     {&#10;//         options.RequireHttpsMetadata = true; // Enforce HTTPS in production for security&#10;//         options.TokenValidationParameters = new TokenValidationParameters&#10;//         {&#10;//             // Validate all critical JWT components&#10;//             ValidateIssuer = true, // Ensure token comes from trusted issuer&#10;//             ValidateAudience = true, // Ensure token is intended for this API&#10;//             ValidateLifetime = true, // Check token expiration&#10;//             ValidateIssuerSigningKey = true, // Verify token signature&#10;//             &#10;//             // JWT configuration from appsettings&#10;//             IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(builder.Configuration[&quot;Jwt:Secret&quot;])),&#10;//             ValidIssuer = builder.Configuration[&quot;Jwt:Issuer&quot;],&#10;//             ValidAudience = builder.Configuration[&quot;Jwt:Audience&quot;],&#10;//             &#10;//             // Security settings&#10;//             ClockSkew = TimeSpan.Zero, // Disable default 5-minute clock skew for precise expiration&#10;//             NameClaimType = JwtRegisteredClaimNames.Sub, // Map user ID claim&#10;//             RoleClaimType = ClaimTypes.Role, // Map role-based authorization claim&#10;//         };&#10;//&#10;//         // JWT event handlers for debugging and logging&#10;//         options.Events = new JwtBearerEvents&#10;//         {&#10;//             OnMessageReceived = context =&gt;&#10;//             {&#10;//                 // Log received tokens for debugging (remove in production)&#10;//                 var token = context&#10;//                     .Request.Headers[&quot;Authorization&quot;]&#10;//                     .ToString()&#10;//                     .Replace(&quot;Bearer &quot;, &quot;&quot;);&#10;//                 Console.WriteLine($&quot;Received token: {token}&quot;);&#10;//                 return Task.CompletedTask;&#10;//             },&#10;//         };&#10;//     });&#10;&#10;// Configure role-based authorization policies&#10;builder.Services.AddAuthorization(options =&gt;&#10;{&#10;    options.AddPolicy(&quot;RequireAdminRole&quot;, policy =&gt;&#10;        policy.RequireRole(&quot;Admin&quot;)); // Full system access&#10;    options.AddPolicy(&quot;RequireManagerRole&quot;, policy =&gt;&#10;        policy.RequireRole(&quot;Manager&quot;)); // Management operations&#10;    options.AddPolicy(&quot;RequireConsultant&quot;, policy =&gt;&#10;        policy.RequireRole(&quot;Consultant&quot;)); // Healthcare provider access&#10;    options.AddPolicy(&quot;RequireStaffRole&quot;, policy =&gt;&#10;        policy.RequireRole(&quot;Staff&quot;)); // Staff operations (test results, content)&#10;    options.AddPolicy(&quot;RequireCustomerRole&quot;, policy =&gt;&#10;        policy.RequireRole(&quot;Customer&quot;)); // Patient/customer access&#10;});&#10;&#10;// Configure Unit of Work pattern for database transactions&#10;builder.Services.AddScoped&lt;IUnitOfWork&lt;PawNestDbContext&gt;,UnitOfWork&lt;PawNestDbContext&gt;&gt;();&#10;// Generic repository for common CRUD operations&#10;builder.Services.AddScoped(typeof(IGenericRepository&lt;&gt;), typeof(GenericRepository&lt;&gt;));&#10;// HTTP context access for getting current user information&#10;builder.Services.AddHttpContextAccessor();&#10;// Register application services&#10;builder.Services.AddScoped&lt;IUserService, UserService&gt;();&#10;&#10;// Configure AutoMapper&#10;builder.Services.AddAutoMapper(AppDomain.CurrentDomain.GetAssemblies());&#10;&#10;// Configure database configuration&#10;&#10;builder.Services.AddDbContext&lt;PawNestDbContext&gt;(options =&gt;&#10;{&#10;    options.UseNpgsql(builder.Configuration.GetConnectionString(&quot;DefaultConnection&quot;),&#10;        npgsqlOptionsAction: sqlOptions =&gt;&#10;        {&#10;            sqlOptions.EnableRetryOnFailure(&#10;                maxRetryCount: 5,&#10;                maxRetryDelay: TimeSpan.FromSeconds(30),&#10;                errorCodesToAdd: null);&#10;        });&#10;});&#10;&#10;&#10;var app = builder.Build();&#10;&#10;&#10;if (app.Environment.IsDevelopment())&#10;{&#10;    // Enable Swagger API documentation in development&#10;    app.UseSwagger();&#10;    app.UseSwaggerUI(options =&gt;&#10;        options.SwaggerEndpoint(&quot;/swagger/v1/swagger.json&quot;, &quot;PawNest.API v1&quot;));&#10;}&#10;&#10;if (app.Environment.IsDevelopment())&#10;{&#10;    // Enable Swagger API documentation in development&#10;    app.UseSwagger();&#10;    app.UseSwaggerUI(options =&gt;&#10;        options.SwaggerEndpoint(&quot;/swagger/v2.5/swagger.json&quot;, &quot;Everwell.API v2.5&quot;));&#10;}&#10;&#10;app.UseCors(options =&gt;&#10;{&#10;    if (app.Environment.IsDevelopment())&#10;    {&#10;        // Development: Allow localhost and Daily.co video meeting domains&#10;        options.SetIsOriginAllowed(origin =&gt;&#10;                origin.StartsWith(&quot;http://localhost:&quot;))// Local development servers&#10;            .AllowAnyMethod() // Allow all HTTP methods (GET, POST, PUT, DELETE, etc.)&#10;            .AllowAnyHeader() // Allow all headers&#10;            .AllowCredentials(); // Allow cookies and authentication headers&#10;    }&#10;});&#10;&#10;app.UseHttpsRedirection();&#10;&#10;// app.UseAuthentication(); // Validate JWT tokens&#10;// app.UseMiddleware&lt;TokenBlacklistMiddleware&gt;(); // Check for blacklisted tokens (logout functionality)&#10;// app.UseAuthorization(); // Apply role-based access control&#10;&#10;// Map API controllers to handle HTTP requests&#10;app.MapControllers();&#10;&#10;&#10;app.Run();&#10;" />
              <option name="updatedContent" value="using Everwell.DAL.Repositories.Implements;&#10;using Everwell.DAL.Repositories.Interfaces;&#10;using Microsoft.OpenApi.Models;&#10;using Microsoft.AspNetCore.Authentication.JwtBearer;&#10;using Microsoft.EntityFrameworkCore;&#10;using PawNest.BLL.Services.Implements;&#10;using PawNest.BLL.Services.Interfaces;&#10;using PawNest.DAL.Data.Context;&#10;using PawNest.DAL.Mappers;&#10;using AutoMapper;&#10;&#10;var builder = WebApplication.CreateBuilder(args);&#10;&#10;builder.Services.AddOpenApi();&#10;builder.Services.AddControllers();&#10;builder.Services.AddEndpointsApiExplorer();&#10;&#10;// Configure Swagger with JWT Bearer authentication&#10;builder.Services.AddSwaggerGen(options =&gt;&#10;{&#10;    options.SwaggerDoc(&quot;v1&quot;, new OpenApiInfo&#10;    {&#10;        Title = &quot;PawNest.API&quot;,&#10;        Version = &quot;v1&quot;,&#10;        Description = &quot;A Freelancer project - Pet Care Service API&quot;,&#10;    });&#10;    // options.AddSecurityDefinition(JwtBearerDefaults.AuthenticationScheme, new OpenApiSecurityScheme&#10;    // {&#10;    //     Name = &quot;Authorization&quot;,&#10;    //     In = ParameterLocation.Header,&#10;    //     Type = SecuritySchemeType.Http,&#10;    //     Scheme = &quot;Bearer&quot;,&#10;    //     BearerFormat = &quot;JWT&quot;,&#10;    //     Description = &quot;JWT Authorization header using the Bearer scheme. \r\n\r\n Enter your token:&quot;&#10;    // });&#10;    // options.AddSecurityRequirement(new OpenApiSecurityRequirement&#10;    // {&#10;    //     {&#10;    //         new OpenApiSecurityScheme&#10;    //         {&#10;    //             Reference = new OpenApiReference&#10;    //             {&#10;    //                 Type = ReferenceType.SecurityScheme,&#10;    //                 Id = JwtBearerDefaults.AuthenticationScheme&#10;    //             }&#10;    //         },&#10;    //         new List&lt;string&gt;()&#10;    //     }&#10;    // });&#10;});&#10;&#10;// Configure JWT Bearer authentication&#10;// builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)&#10;//     .AddJwtBearer(options =&gt;&#10;//     {&#10;//         options.RequireHttpsMetadata = true; // Enforce HTTPS in production for security&#10;//         options.TokenValidationParameters = new TokenValidationParameters&#10;//         {&#10;//             // Validate all critical JWT components&#10;//             ValidateIssuer = true, // Ensure token comes from trusted issuer&#10;//             ValidateAudience = true, // Ensure token is intended for this API&#10;//             ValidateLifetime = true, // Check token expiration&#10;//             ValidateIssuerSigningKey = true, // Verify token signature&#10;//             &#10;//             // JWT configuration from appsettings&#10;//             IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(builder.Configuration[&quot;Jwt:Secret&quot;])),&#10;//             ValidIssuer = builder.Configuration[&quot;Jwt:Issuer&quot;],&#10;//             ValidAudience = builder.Configuration[&quot;Jwt:Audience&quot;],&#10;//             &#10;//             // Security settings&#10;//             ClockSkew = TimeSpan.Zero, // Disable default 5-minute clock skew for precise expiration&#10;//             NameClaimType = JwtRegisteredClaimNames.Sub, // Map user ID claim&#10;//             RoleClaimType = ClaimTypes.Role, // Map role-based authorization claim&#10;//         };&#10;//&#10;//         // JWT event handlers for debugging and logging&#10;//         options.Events = new JwtBearerEvents&#10;//         {&#10;//             OnMessageReceived = context =&gt;&#10;//             {&#10;//                 // Log received tokens for debugging (remove in production)&#10;//                 var token = context&#10;//                     .Request.Headers[&quot;Authorization&quot;]&#10;//                     .ToString()&#10;//                     .Replace(&quot;Bearer &quot;, &quot;&quot;);&#10;//                 Console.WriteLine($&quot;Received token: {token}&quot;);&#10;//                 return Task.CompletedTask;&#10;//             },&#10;//         };&#10;//     });&#10;&#10;// Configure role-based authorization policies&#10;builder.Services.AddAuthorization(options =&gt;&#10;{&#10;    options.AddPolicy(&quot;RequireAdminRole&quot;, policy =&gt;&#10;        policy.RequireRole(&quot;Admin&quot;)); // Full system access&#10;    options.AddPolicy(&quot;RequireManagerRole&quot;, policy =&gt;&#10;        policy.RequireRole(&quot;Manager&quot;)); // Management operations&#10;    options.AddPolicy(&quot;RequireConsultant&quot;, policy =&gt;&#10;        policy.RequireRole(&quot;Consultant&quot;)); // Healthcare provider access&#10;    options.AddPolicy(&quot;RequireStaffRole&quot;, policy =&gt;&#10;        policy.RequireRole(&quot;Staff&quot;)); // Staff operations (test results, content)&#10;    options.AddPolicy(&quot;RequireCustomerRole&quot;, policy =&gt;&#10;        policy.RequireRole(&quot;Customer&quot;)); // Patient/customer access&#10;});&#10;&#10;// Configure Unit of Work pattern for database transactions&#10;builder.Services.AddScoped&lt;IUnitOfWork&lt;PawNestDbContext&gt;,UnitOfWork&lt;PawNestDbContext&gt;&gt;();&#10;// Generic repository for common CRUD operations&#10;builder.Services.AddScoped(typeof(IGenericRepository&lt;&gt;), typeof(GenericRepository&lt;&gt;));&#10;// HTTP context access for getting current user information&#10;builder.Services.AddHttpContextAccessor();&#10;// Register application services&#10;builder.Services.AddScoped&lt;IUserService, UserService&gt;();&#10;&#10;// Configure AutoMapper&#10;builder.Services.AddAutoMapper(AppDomain.CurrentDomain.GetAssemblies());&#10;&#10;// Configure database configuration&#10;&#10;builder.Services.AddDbContext&lt;PawNestDbContext&gt;(options =&gt;&#10;{&#10;    options.UseNpgsql(builder.Configuration.GetConnectionString(&quot;DefaultConnection&quot;),&#10;        npgsqlOptionsAction: sqlOptions =&gt;&#10;        {&#10;            sqlOptions.EnableRetryOnFailure(&#10;                maxRetryCount: 5,&#10;                maxRetryDelay: TimeSpan.FromSeconds(30),&#10;                errorCodesToAdd: null);&#10;        });&#10;});&#10;&#10;&#10;var app = builder.Build();&#10;&#10;&#10;if (app.Environment.IsDevelopment())&#10;{&#10;    // Enable Swagger API documentation in development&#10;    app.UseSwagger();&#10;    app.UseSwaggerUI(options =&gt;&#10;        options.SwaggerEndpoint(&quot;/swagger/v1/swagger.json&quot;, &quot;PawNest.API v1&quot;));&#10;}&#10;&#10;if (app.Environment.IsDevelopment())&#10;{&#10;    // Enable Swagger API documentation in development&#10;    app.UseSwagger();&#10;    app.UseSwaggerUI(options =&gt;&#10;        options.SwaggerEndpoint(&quot;/swagger/v2.5/swagger.json&quot;, &quot;Everwell.API v2.5&quot;));&#10;}&#10;&#10;app.UseCors(options =&gt;&#10;{&#10;    if (app.Environment.IsDevelopment())&#10;    {&#10;        // Development: Allow localhost and Daily.co video meeting domains&#10;        options.SetIsOriginAllowed(origin =&gt;&#10;                origin.StartsWith(&quot;http://localhost:&quot;))// Local development servers&#10;            .AllowAnyMethod() // Allow all HTTP methods (GET, POST, PUT, DELETE, etc.)&#10;            .AllowAnyHeader() // Allow all headers&#10;            .AllowCredentials(); // Allow cookies and authentication headers&#10;    }&#10;});&#10;&#10;app.UseHttpsRedirection();&#10;&#10;// app.UseAuthentication(); // Validate JWT tokens&#10;// app.UseMiddleware&lt;TokenBlacklistMiddleware&gt;(); // Check for blacklisted tokens (logout functionality)&#10;// app.UseAuthorization(); // Apply role-based access control&#10;&#10;// Map API controllers to handle HTTP requests&#10;app.MapControllers();&#10;&#10;&#10;app.Run();" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>