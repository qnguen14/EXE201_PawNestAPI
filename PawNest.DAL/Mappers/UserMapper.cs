using AutoMapper;
using PawNest.DAL.Data.Responses.User;
using PawNest.DAL.Data.Entities;
using PawNest.DAL.Data.Requests.User;

namespace PawNest.DAL.Mappers;

public class UserMapper : Profile 
{
    public UserMapper()
    {
        // CreateUserRequest to User
        CreateMap<CreateUserRequest, User>()
            .ForMember(dest => dest.Id, opt => opt.Ignore()) // Id will be generated by the database
            .ForMember(dest => dest.IsActive, opt => opt.MapFrom(src => true)) // Default to active
            .ForMember(dest => dest.Password, opt => opt.Ignore()) // Password will be hashed manually
            .ForMember(dest => dest.Role, opt => opt.Ignore()) // Role will be parsed manually
            .ForMember(dest => dest.AvatarUrl, opt => opt.MapFrom(src => (string)null)) // Default null
            .ForMember(dest => dest.Posts, opt => opt.Ignore()); // Ignore navigation properties
        
        // User to CreateUserResponse
        CreateMap<User, CreateUserResponse>()
            .ForMember(dest => dest.Id, opt => opt.MapFrom(src => src.Id))
            .ForMember(dest => dest.Name, opt => opt.MapFrom(src => src.Name))
            .ForMember(dest => dest.Email, opt => opt.MapFrom(src => src.Email))
            .ForMember(dest => dest.PhoneNumber, opt => opt.MapFrom(src => src.PhoneNumber))
            .ForMember(dest => dest.Address, opt => opt.MapFrom(src => src.Address))
            .ForMember(dest => dest.Role, opt => opt.MapFrom(src => src.Role.RoleName))
            .ForMember(dest => dest.IsActive, opt => opt.MapFrom(src => src.IsActive));

        // User to GetFreelancerResponse
        CreateMap<User, GetFreelancerResponse>()
            .ForMember(dest => dest.Id, opt => opt.MapFrom(src => src.Id))
            .ForMember(dest => dest.Name, opt => opt.MapFrom(src => src.Name))
            .ForMember(dest => dest.Email, opt => opt.MapFrom(src => src.Email))
            .ForMember(dest => dest.PhoneNumber, opt => opt.MapFrom(src => src.PhoneNumber))
            .ForMember(dest => dest.Address, opt => opt.MapFrom(src => src.Address))
            .ForMember(dest => dest.Role, opt => opt.MapFrom(src => src.Role != null ? src.Role.RoleName : null))
            .ForMember(dest => dest.AvatarUrl, opt => opt.MapFrom(src => src.AvatarUrl))
            .ForMember(dest => dest.Services, opt => opt.MapFrom(src => src.Services)) // ICollection<Service> -> List<Service>
            .ForMember(dest => dest.ReviewsReceived, opt => opt.MapFrom(src => src.ReviewsReceived)); // ICollection<Review> -> List<Review>


    }


}